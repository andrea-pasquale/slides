declare const _sfc_main: import("vue").DefineComponent<{
    language: {
        type: StringConstructor;
    };
    code: {
        type: StringConstructor;
    };
}, {
    props: any;
    showCopyButton: import("vue").Ref<boolean>;
    error: (message: string, error?: Error | ErrorEvent | undefined) => void;
    copySuccesfully: import("vue").Ref<boolean>;
    formattedLanguage: import("vue").ComputedRef<string | undefined>;
    copyToClipboard: () => Promise<void>;
    highlighter: any;
    codeHtml: any;
    root: () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
    AsButton: import("vue").DefineComponent<{
        disabled: BooleanConstructor;
        outline: BooleanConstructor;
        transparent: BooleanConstructor;
        flat: BooleanConstructor;
        link: StringConstructor;
        label: {
            type: StringConstructor;
            default: string;
        };
        variant: {
            type: StringConstructor;
            default: import("../as-button/const").btnVariant;
            validator: (val: import("../as-button/const").ButtonVariant) => boolean;
        };
        size: {
            type: StringConstructor;
            default: import("../as-button/const").btnSize;
            validator: (val: import("../as-button/const").ButtonSize) => boolean;
        };
        target: {
            type: StringConstructor;
            default: string;
        };
        icon: {
            type: StringConstructor;
        };
        iconRight: {
            type: StringConstructor;
        };
    }, {
        props: any;
        btnClasses: import("vue").ComputedRef<(string | {
            [key: string]: boolean;
        })[]>;
        hasLabel: import("vue").ComputedRef<boolean>;
        AsIcon: import("vue").DefineComponent<{
            name: {
                type: StringConstructor;
                required: true;
            };
        }, {
            props: any;
            iconName: import("vue").ComputedRef<string | undefined>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            name: {
                type: StringConstructor;
                required: true;
            };
        }>>, {}>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        disabled: BooleanConstructor;
        outline: BooleanConstructor;
        transparent: BooleanConstructor;
        flat: BooleanConstructor;
        link: StringConstructor;
        label: {
            type: StringConstructor;
            default: string;
        };
        variant: {
            type: StringConstructor;
            default: import("../as-button/const").btnVariant;
            validator: (val: import("../as-button/const").ButtonVariant) => boolean;
        };
        size: {
            type: StringConstructor;
            default: import("../as-button/const").btnSize;
            validator: (val: import("../as-button/const").ButtonSize) => boolean;
        };
        target: {
            type: StringConstructor;
            default: string;
        };
        icon: {
            type: StringConstructor;
        };
        iconRight: {
            type: StringConstructor;
        };
    }>>, {
        flat: boolean;
        label: string;
        outline: boolean;
        disabled: boolean;
        transparent: boolean;
        variant: string;
        size: string;
        target: string;
    }>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    language: {
        type: StringConstructor;
    };
    code: {
        type: StringConstructor;
    };
}>>, {}>;
export default _sfc_main;
