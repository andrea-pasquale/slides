import { btnSize, btnVariant, ButtonSize, ButtonVariant } from './const';
declare const _sfc_main: import("vue").DefineComponent<{
    disabled: BooleanConstructor;
    outline: BooleanConstructor;
    transparent: BooleanConstructor;
    flat: BooleanConstructor;
    link: StringConstructor;
    label: {
        type: StringConstructor;
        default: string;
    };
    variant: {
        type: StringConstructor;
        default: btnVariant;
        validator: (val: ButtonVariant) => boolean;
    };
    size: {
        type: StringConstructor;
        default: btnSize;
        validator: (val: ButtonSize) => boolean;
    };
    target: {
        type: StringConstructor;
        default: string;
    };
    icon: {
        type: StringConstructor;
    };
    iconRight: {
        type: StringConstructor;
    };
}, {
    props: any;
    btnClasses: import("vue").ComputedRef<(string | {
        [key: string]: boolean;
    })[]>;
    hasLabel: import("vue").ComputedRef<boolean>;
    AsIcon: import("vue").DefineComponent<{
        name: {
            type: StringConstructor;
            required: true;
        };
    }, {
        props: any;
        iconName: import("vue").ComputedRef<string | undefined>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        name: {
            type: StringConstructor;
            required: true;
        };
    }>>, {}>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    disabled: BooleanConstructor;
    outline: BooleanConstructor;
    transparent: BooleanConstructor;
    flat: BooleanConstructor;
    link: StringConstructor;
    label: {
        type: StringConstructor;
        default: string;
    };
    variant: {
        type: StringConstructor;
        default: btnVariant;
        validator: (val: ButtonVariant) => boolean;
    };
    size: {
        type: StringConstructor;
        default: btnSize;
        validator: (val: ButtonSize) => boolean;
    };
    target: {
        type: StringConstructor;
        default: string;
    };
    icon: {
        type: StringConstructor;
    };
    iconRight: {
        type: StringConstructor;
    };
}>>, {
    flat: boolean;
    label: string;
    outline: boolean;
    disabled: boolean;
    transparent: boolean;
    variant: string;
    size: string;
    target: string;
}>;
export default _sfc_main;
