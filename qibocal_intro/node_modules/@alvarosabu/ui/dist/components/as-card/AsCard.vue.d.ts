declare const _sfc_main: import("vue").DefineComponent<{
    title: {
        type: StringConstructor;
        default: string;
    };
    subtitle: {
        type: StringConstructor;
        default: string;
    };
    media: {
        type: StringConstructor;
        default: string;
    };
    mediaAlt: {
        type: StringConstructor;
        default: string;
    };
    content: {
        type: StringConstructor;
        default: string;
    };
}, {
    AsImg: import("vue").DefineComponent<{
        aspectRatio: {
            type: StringConstructor;
            validator: (val: string) => boolean;
        };
        objectFit: {
            type: StringConstructor;
            default: import("../as-img/const").imgFitModes;
            validator: (val: string) => boolean;
        };
        caption: StringConstructor;
        captionMode: {
            type: StringConstructor;
            default: import("../as-img/const").imgCaptionType;
            validator: (val: string) => boolean;
        };
        captionType: {
            type: StringConstructor;
            default: import("../as-img/const").imgCaptionType;
            validator: (val: string) => boolean;
        };
    }, {
        props: any;
        emit: {
            (e: "loaded", event: Event): void;
            (e: "error", errorMessage: string): void;
        };
        attrs: {
            [x: string]: unknown;
        };
        imgAttrs: import("vue").ComputedRef<{
            src: string;
            alt: string;
        }>;
        hasError: import("vue").Ref<boolean>;
        loading: import("vue").Ref<boolean>;
        error: (message: string, error?: Error | ErrorEvent | undefined) => void;
        imgStyles: import("vue").ComputedRef<import("vue").StyleValue>;
        imgClasses: import("vue").ComputedRef<{
            'w-full bg-gray-100 relative': boolean;
            'overflow-hidden :before:(bg-red-100 block absolute inset-0 bg-no-repeat bg-center)': boolean;
        }>;
        figureClasses: import("vue").Ref<(string | null)[]>;
        captionClasses: import("vue").ComputedRef<string[] | "" | "absolute bg-black text-sm text-white bottom-0 bg-opacity-20 w-full p-4 text-center" | "absolute bg-black text-sm text-white inset-0 bg-opacity-20 w-full \n      p-4 text-center flex items-center justify-center">;
        onLoad: (event: Event) => void;
        onError: (event: Event) => void;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("error" | "loaded")[], "error" | "loaded", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        aspectRatio: {
            type: StringConstructor;
            validator: (val: string) => boolean;
        };
        objectFit: {
            type: StringConstructor;
            default: import("../as-img/const").imgFitModes;
            validator: (val: string) => boolean;
        };
        caption: StringConstructor;
        captionMode: {
            type: StringConstructor;
            default: import("../as-img/const").imgCaptionType;
            validator: (val: string) => boolean;
        };
        captionType: {
            type: StringConstructor;
            default: import("../as-img/const").imgCaptionType;
            validator: (val: string) => boolean;
        };
    }>> & {
        onError?: ((...args: any[]) => any) | undefined;
        onLoaded?: ((...args: any[]) => any) | undefined;
    }, {
        objectFit: string;
        captionMode: string;
        captionType: string;
    }>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    title: {
        type: StringConstructor;
        default: string;
    };
    subtitle: {
        type: StringConstructor;
        default: string;
    };
    media: {
        type: StringConstructor;
        default: string;
    };
    mediaAlt: {
        type: StringConstructor;
        default: string;
    };
    content: {
        type: StringConstructor;
        default: string;
    };
}>>, {
    content: string;
    title: string;
    subtitle: string;
    media: string;
    mediaAlt: string;
}>;
export default _sfc_main;
